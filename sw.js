const CACHE_NAME="kmarCache",VERSION_CACHE_NAME="kmarCacheTime",MAX_ACCESS_CACHE_TIME=864e3;function time(){return(new Date).getTime()}const dbHelper={read:e=>new Promise((t=>{caches.match(e).then((function(e){e||t(null),e.text().then((e=>t(e)))})).catch((()=>{t(null)}))})),write:(e,t)=>new Promise(((n,c)=>{caches.open("kmarCacheTime").then((function(c){c.put(e,new Response(t)),n()})).catch((()=>{c()}))})),delete:e=>{caches.match(e).then((t=>{t&&caches.open("kmarCacheTime").then((t=>t.delete(e)))}))}},dbTime={read:e=>dbHelper.read(new Request(`https://LOCALCACHE/${encodeURIComponent(e)}`)),write:(e,t)=>dbHelper.write(new Request(`https://LOCALCACHE/${encodeURIComponent(e)}`),t),delete:e=>dbHelper.delete(new Request(`https://LOCALCACHE/${encodeURIComponent(e)}`))},dbAccess={update:e=>dbHelper.write(new Request(`https://ACCESS-CACHE/${encodeURIComponent(e)}`),time()),check:async e=>{const t=new Request(`https://ACCESS-CACHE/${encodeURIComponent(e)}`),n=await dbHelper.read(t);return!!n&&(dbHelper.delete(t),time()-n<864e3)}};self.addEventListener("install",(()=>self.skipWaiting()));const cacheList={sample:{url:/[填写正则表达式]/g,time:Number.MAX_VALUE,clean:!0}},replaceList={sample:{source:["//www.kmar.top"],dist:"//kmar.top"}};function findCache(e){for(let t in cacheList){const n=cacheList[t];if(e.match(n.url))return n}return null}function replaceRequest(e){let t=e.url,n=!1;for(let e in replaceList){const c=replaceList[e];for(let e of c.source)t.match(e)&&(t=t.replace(e,c.dist),n=!0)}return n?new Request(t):null}function blockRequest(e){return!1}async function fetchEvent(e,t,n){const c=time();dbAccess.update(e.url);const s=n.time;let r=!1;if(t){const n=await dbTime.read(e.url);if(n){if(c-n<s)return t}r=!0}const o=()=>fetch(e).then((t=>{if(dbTime.write(e.url,c),t.ok||0===t.status){const n=t.clone();caches.open(CACHE_NAME).then((t=>t.put(e,n)))}return t}));if(!r)return o();return Promise.race([new Promise((e=>setTimeout((()=>e(t)),400))),o()]).catch((t=>console.error("不可达的链接："+e.url+"\n错误信息："+t)))}self.addEventListener("fetch",(async e=>{const t=replaceRequest(e.request),n=null===t?e.request:t,c=findCache(n.url);blockRequest(n)?e.respondWith(new Response(null,{status:204})):null!==c?e.respondWith(caches.match(n).then((async e=>fetchEvent(n,e,cacheList)))):null!==t&&e.respondWith(fetch(n))})),self.addEventListener("message",(function(e){"refresh"===e.data&&caches.open(CACHE_NAME).then((function(t){t.keys().then((function(n){for(let e of n){const n=findCache(e.url);null!=n&&!n.clean&&dbAccess.check(e.url)||(t.delete(e),dbTime.delete(e))}e.source.postMessage("success")}))}))}));